services:
  # --- Raft Lock Manager Nodes ---
  node1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: node1
    ports:
      - "8001:8000"
    environment:
      NODE_ID: node1
      PEERS: node2,node3
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/node1.crt
      KEY_FILE: /etc/ssl/certs/myapp/node1.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.lock_manager
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  node2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: node2
    ports:
      - "8002:8000"
    environment:
      NODE_ID: node2
      PEERS: node1,node3
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/node2.crt
      KEY_FILE: /etc/ssl/certs/myapp/node2.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.lock_manager
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  node3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: node3
    ports:
      - "8003:8000"
    environment:
      NODE_ID: node3
      PEERS: node1,node2
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/node3.crt
      KEY_FILE: /etc/ssl/certs/myapp/node3.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.lock_manager
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  # --- Queue Node (juga perlu volume) ---
  queue-node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: queue-node-1
    ports:
      - "9101:8000"
    environment:
      NODE_ID: queue-node-1
      INTERNAL_PORT: 8000
      REDIS_NODES: redis-1,redis-2,redis-3
      CERT_FILE: /etc/ssl/certs/myapp/queue-node-1.crt
      KEY_FILE: /etc/ssl/certs/myapp/queue-node-1.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.queue_node
    networks:
      - distributed_net
    depends_on:
      - redis-1
      - redis-2
      - redis-3
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  # --- Redis ---
  redis-1:
    image: redis:7-alpine
    container_name: redis-1
    networks:
      - distributed_net
  redis-2:
    image: redis:7-alpine
    container_name: redis-2
    networks:
      - distributed_net
  redis-3:
    image: redis:7-alpine
    container_name: redis-3
    networks:
      - distributed_net

  # --- Cache Nodes (juga perlu volume) ---
  cache-node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-1
    ports:
      - "10001:8000"
    environment:
      NODE_ID: cache-node-1
      PEERS: cache-node-2,cache-node-3
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/cache-node-1.crt
      KEY_FILE: /etc/ssl/certs/myapp/cache-node-1.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.cache_node
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  cache-node-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-2
    ports:
      - "10002:8000"
    environment:
      NODE_ID: cache-node-2
      PEERS: cache-node-1,cache-node-3
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/cache-node-2.crt
      KEY_FILE: /etc/ssl/certs/myapp/cache-node-2.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.cache_node
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

  cache-node-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: cache-node-3
    ports:
      - "10003:8000"
    environment:
      NODE_ID: cache-node-3
      PEERS: cache-node-1,cache-node-2
      INTERNAL_PORT: 8000
      CERT_FILE: /etc/ssl/certs/myapp/cache-node-3.crt
      KEY_FILE: /etc/ssl/certs/myapp/cache-node-3.key
      CA_FILE: /etc/ssl/certs/myapp/ca.crt
    command: python -m src.nodes.cache_node
    networks:
      - distributed_net
    # --- TAMBAHKAN VOLUME ---
    volumes:
      - ../certs:/etc/ssl/certs/myapp:ro # Mount certs dari host (read-only)
    # -----------------------

networks:
  distributed_net:
    driver: bridge
